{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport ApiService from \"../../services/ApiService\";\n\n// 게시글 상세 정보 가져오기\nexport const fetchPostDetails = createAsyncThunk(\"post/fetchPostDetails\", async ({\n  postId,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await ApiService.fetchPostDetails(postId, password);\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\n\n// 게시글 업데이트\nexport const updatePost = createAsyncThunk(\"post/updatePost\", async ({\n  postId,\n  postData\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await ApiService.updatePost(postId, postData);\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\n\n// 게시글 삭제\nexport const deletePost = createAsyncThunk(\"post/deletePost\", async ({\n  postId,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    await ApiService.deletePost(postId, password);\n    return postId; // 성공시 삭제된 postId 반환\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: {\n    post: null,\n    status: \"idle\",\n    error: null\n  },\n  reducers: {\n    setPost: (state, action) => {\n      state.post = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPostDetails.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchPostDetails.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.post = action.payload;\n    }).addCase(fetchPostDetails.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.post = action.payload;\n    }).addCase(updatePost.pending, state => {\n      state.status = \"loading\";\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.post = action.payload;\n    }).addCase(updatePost.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.post = action.payload;\n    }).addCase(deletePost.pending, state => {\n      state.status = \"loading\";\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.post = null; // 삭제 후 게시글 초기화\n    }).addCase(deletePost.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.post = action.payload;\n    });\n  }\n});\nexport const {\n  setPost\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","ApiService","fetchPostDetails","postId","password","rejectWithValue","response","data","error","updatePost","postData","deletePost","postSlice","name","initialState","post","status","reducers","setPost","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/workspace/reactWorkspace/react-myboard-app/src/store/slices/postSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport ApiService from \"../../services/ApiService\";\r\n\r\n// 게시글 상세 정보 가져오기\r\nexport const fetchPostDetails = createAsyncThunk(\r\n    \"post/fetchPostDetails\",\r\n    async ({ postId, password }, { rejectWithValue }) => {\r\n        try {\r\n            const response = await ApiService.fetchPostDetails(postId, password);\r\n            return response.data;\r\n        } catch (error) {\r\n            return rejectWithValue(error.response.data);\r\n        }\r\n    }\r\n);\r\n\r\n// 게시글 업데이트\r\nexport const updatePost = createAsyncThunk(\r\n    \"post/updatePost\",\r\n    async ({ postId, postData }, { rejectWithValue }) => {\r\n        try {\r\n            const response = await ApiService.updatePost(postId, postData);\r\n            return response.data;\r\n        } catch (error) {\r\n            return rejectWithValue(error.response.data);\r\n        }\r\n    }\r\n);\r\n\r\n// 게시글 삭제\r\nexport const deletePost = createAsyncThunk(\r\n    \"post/deletePost\",\r\n    async ({ postId, password }, { rejectWithValue }) => {\r\n        try {\r\n            await ApiService.deletePost(postId, password);\r\n            return postId; // 성공시 삭제된 postId 반환\r\n        } catch (error) {\r\n            return rejectWithValue(error.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nconst postSlice = createSlice({\r\n    name: \"post\",\r\n    initialState: {\r\n        post: null,\r\n        status: \"idle\",\r\n        error: null,\r\n    },\r\n    reducers: {\r\n        setPost: (state, action) => {\r\n            state.post = action.payload;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchPostDetails.pending, (state) => {\r\n                state.status = \"loading\";\r\n            })\r\n            .addCase(fetchPostDetails.fulfilled, (state, action) => {\r\n                state.status = \"succeeded\";\r\n                state.post = action.payload;\r\n            })\r\n            .addCase(fetchPostDetails.rejected, (state, action) => {\r\n                state.status = \"failed\";\r\n                state.post = action.payload;\r\n            })\r\n            .addCase(updatePost.pending, (state) => {\r\n                state.status = \"loading\";\r\n            })\r\n            .addCase(updatePost.fulfilled, (state, action) => {\r\n                state.status = \"succeeded\";\r\n                state.post = action.payload;\r\n            })\r\n            .addCase(updatePost.rejected, (state, action) => {\r\n                state.status = \"failed\";\r\n                state.post = action.payload;\r\n            })\r\n            .addCase(deletePost.pending, (state) => {\r\n                state.status = \"loading\";\r\n            })\r\n            .addCase(deletePost.fulfilled, (state, action) => {\r\n                state.status = \"succeeded\";\r\n                state.post = null; // 삭제 후 게시글 초기화\r\n            })\r\n            .addCase(deletePost.rejected, (state, action) => {\r\n                state.status = \"failed\";\r\n                state.post = action.payload;\r\n            });\r\n    },\r\n});\r\n\r\nexport const { setPost } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}