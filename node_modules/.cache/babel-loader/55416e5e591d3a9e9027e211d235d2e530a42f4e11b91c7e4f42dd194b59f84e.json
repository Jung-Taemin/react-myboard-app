{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import ApiService from\"../services/ApiService\";import{Button,Container,List,ListItem,ListItemText,Typography}from\"@mui/material\";import{Link,useNavigate}from\"react-router-dom\";import{useDispatch}from\"react-redux\";import{setBoardId}from\"../store/slices/boardSlice\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BoardList=()=>{const[boards,setBoards]=useState([]);const navigate=useNavigate();const dispatch=useDispatch();//컴포넌트가 마운트될 때 데이터를 불러오기\nuseEffect(()=>{const loadBoards=async()=>{try{const response=await ApiService.fetchBoards();console.log(response.data);setBoards(response.data);}catch(error){console.error(\"Error fetching boards: \",error);}};loadBoards();},[]);const handleBoardClick=boardId=>{dispatch(setBoardId(boardId));navigate(\"/posts\");//navigate(`/board/${boardId}`);\n};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",children:\"\\uAC8C\\uC2DC\\uD310 \\uBAA9\\uB85D\"}),/*#__PURE__*/_jsx(List,{children:boards.map(board=>/*#__PURE__*/_jsx(ListItem,{button:\"true\",onClick:()=>handleBoardClick(board.board_id),children:/*#__PURE__*/_jsx(ListItemText,{primary:board.board_name})},board.board_id))}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",component:Link,to:\"/create-board\",children:\"\\uC0C8 \\uAC8C\\uC2DC\\uD310 \\uCD94\\uAC00\"})]});};export default BoardList;","map":{"version":3,"names":["React","useEffect","useState","ApiService","Button","Container","List","ListItem","ListItemText","Typography","Link","useNavigate","useDispatch","setBoardId","jsx","_jsx","jsxs","_jsxs","BoardList","boards","setBoards","navigate","dispatch","loadBoards","response","fetchBoards","console","log","data","error","handleBoardClick","boardId","children","variant","map","board","button","onClick","board_id","primary","board_name","color","component","to"],"sources":["C:/workspace/github_test/react-myboard-app/src/components/BoardList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ApiService from \"../services/ApiService\";\nimport {\n  Button,\n  Container,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setBoardId } from \"../store/slices/boardSlice\";\n\nconst BoardList = () => {\n  const [boards, setBoards] = useState([]);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  //컴포넌트가 마운트될 때 데이터를 불러오기\n  useEffect(() => {\n    const loadBoards = async () => {\n      try {\n        const response = await ApiService.fetchBoards();\n        console.log(response.data);\n        setBoards(response.data);\n      } catch (error) {\n        console.error(\"Error fetching boards: \", error);\n      }\n    };\n\n    loadBoards();\n  }, []);\n\n  const handleBoardClick = (boardId) => {\n    dispatch(setBoardId(boardId));\n    navigate(\"/posts\");\n    //navigate(`/board/${boardId}`);\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h4\">게시판 목록</Typography>\n      <List>\n        {boards.map((board) => (\n          <ListItem\n            key={board.board_id}\n            button=\"true\"\n            onClick={() => handleBoardClick(board.board_id)}\n          >\n            <ListItemText primary={board.board_name} />\n          </ListItem>\n        ))}\n      </List>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        component={Link}\n        to=\"/create-board\"\n      >\n        새 게시판 추가\n      </Button>\n    </Container>\n  );\n};\n\nexport default BoardList;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,UAAU,KAAM,wBAAwB,CAC/C,OACEC,MAAM,CACNC,SAAS,CACTC,IAAI,CACJC,QAAQ,CACRC,YAAY,CACZC,UAAU,KACL,eAAe,CACtB,OAASC,IAAI,CAAEC,WAAW,KAAQ,kBAAkB,CACpD,OAASC,WAAW,KAAQ,aAAa,CACzC,OAASC,UAAU,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExD,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAAAmB,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAW,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAE9B;AACAX,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsB,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAArB,UAAU,CAACsB,WAAW,CAAC,CAAC,CAC/CC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC,CAC1BR,SAAS,CAACI,QAAQ,CAACI,IAAI,CAAC,CAC1B,CAAE,MAAOC,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACjD,CACF,CAAC,CAEDN,UAAU,CAAC,CAAC,CACd,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAO,gBAAgB,CAAIC,OAAO,EAAK,CACpCT,QAAQ,CAACT,UAAU,CAACkB,OAAO,CAAC,CAAC,CAC7BV,QAAQ,CAAC,QAAQ,CAAC,CAClB;AACF,CAAC,CAED,mBACEJ,KAAA,CAACZ,SAAS,EAAA2B,QAAA,eACRjB,IAAA,CAACN,UAAU,EAACwB,OAAO,CAAC,IAAI,CAAAD,QAAA,CAAC,iCAAM,CAAY,CAAC,cAC5CjB,IAAA,CAACT,IAAI,EAAA0B,QAAA,CACFb,MAAM,CAACe,GAAG,CAAEC,KAAK,eAChBpB,IAAA,CAACR,QAAQ,EAEP6B,MAAM,CAAC,MAAM,CACbC,OAAO,CAAEA,CAAA,GAAMP,gBAAgB,CAACK,KAAK,CAACG,QAAQ,CAAE,CAAAN,QAAA,cAEhDjB,IAAA,CAACP,YAAY,EAAC+B,OAAO,CAAEJ,KAAK,CAACK,UAAW,CAAE,CAAC,EAJtCL,KAAK,CAACG,QAKH,CACX,CAAC,CACE,CAAC,cAEPvB,IAAA,CAACX,MAAM,EACL6B,OAAO,CAAC,WAAW,CACnBQ,KAAK,CAAC,SAAS,CACfC,SAAS,CAAEhC,IAAK,CAChBiC,EAAE,CAAC,eAAe,CAAAX,QAAA,CACnB,wCAED,CAAQ,CAAC,EACA,CAAC,CAEhB,CAAC,CAED,cAAe,CAAAd,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}