{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\reactWorkspace\\\\react-myboard-app\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ApiService from \"../services/ApiService\";\nimport Post from \"./Post\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Container, List, ListItem, Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  // const { boardId } = useParams(); // boardId를 URL에서 받아오기\n  const boardId = useSelector(state => state.boardState.boardId);\n  const [posts, setPosts] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const loadPosts = async () => {\n      try {\n        const response = await ApiService.fetchPostsByBoardId(boardId); //전체 게시글 가져오는 API 호출\n        console.log(response.data);\n        setPosts(response.data);\n      } catch (error) {\n        console.error(\"Error fetching posts: \", error);\n      }\n    };\n    loadPosts();\n  }, [boardId]);\n  const handleCreatePost = boardId => {\n    //navigate.apply(`/create-post`, { state: { boardId } });\n    navigate(\"create-post\");\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => handleCreatePost(boardId),\n      sx: {\n        mb: 2\n      },\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(PostList, \"xxudqgDayK23YXUBi+30+LnUllM=\", false, function () {\n  return [useSelector, useNavigate];\n});\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","ApiService","Post","useNavigate","Button","Container","List","ListItem","Typography","useSelector","jsxDEV","_jsxDEV","PostList","_s","boardId","state","boardState","posts","setPosts","navigate","loadPosts","response","fetchPostsByBoardId","console","log","data","error","handleCreatePost","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","color","onClick","sx","mb","_c","$RefreshReg$"],"sources":["C:/workspace/reactWorkspace/react-myboard-app/src/components/PostList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ApiService from \"../services/ApiService\";\nimport Post from \"./Post\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Container, List, ListItem, Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\n\nconst PostList = () => {\n  // const { boardId } = useParams(); // boardId를 URL에서 받아오기\n  const boardId = useSelector((state) => state.boardState.boardId);\n  const [posts, setPosts] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loadPosts = async () => {\n      try {\n        const response = await ApiService.fetchPostsByBoardId(boardId); //전체 게시글 가져오는 API 호출\n        console.log(response.data);\n        setPosts(response.data);\n      } catch (error) {\n        console.error(\"Error fetching posts: \", error);\n      }\n    };\n\n    loadPosts();\n  }, [boardId]);\n\n  const handleCreatePost = (boardId) => {\n    //navigate.apply(`/create-post`, { state: { boardId } });\n    navigate(\"create-post\");\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" gutterBottom>\n        게시글 목록\n      </Typography>\n      <List>\n        {posts.map((post) => (\n          <ListItem key={post.id}>\n            <Post post={post} />\n          </ListItem>\n        ))}\n      </List>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => handleCreatePost(boardId)}\n        sx={{ mb: 2 }}\n      >\n        게시글 작성\n      </Button>\n    </Container>\n  );\n};\n\nexport default PostList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,EAAEC,SAAS,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,eAAe;AAC7E,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAMC,OAAO,GAAGL,WAAW,CAAEM,KAAK,IAAKA,KAAK,CAACC,UAAU,CAACF,OAAO,CAAC;EAChE,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMmB,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACd,MAAMqB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMpB,UAAU,CAACqB,mBAAmB,CAACR,OAAO,CAAC,CAAC,CAAC;QAChES,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC;QAC1BP,QAAQ,CAACG,QAAQ,CAACI,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;EAEb,MAAMa,gBAAgB,GAAIb,OAAO,IAAK;IACpC;IACAK,QAAQ,CAAC,aAAa,CAAC;EACzB,CAAC;EAED,oBACER,OAAA,CAACN,SAAS;IAAAuB,QAAA,gBACRjB,OAAA,CAACH,UAAU;MAACqB,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAEtC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACbvB,OAAA,CAACL,IAAI;MAAAsB,QAAA,EACFX,KAAK,CAACkB,GAAG,CAAEC,IAAI,iBACdzB,OAAA,CAACJ,QAAQ;QAAAqB,QAAA,eACPjB,OAAA,CAACT,IAAI;UAACkC,IAAI,EAAEA;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADPE,IAAI,CAACC,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACPvB,OAAA,CAACP,MAAM;MACLyB,OAAO,EAAC,WAAW;MACnBS,KAAK,EAAC,SAAS;MACfC,OAAO,EAAEA,CAAA,KAAMZ,gBAAgB,CAACb,OAAO,CAAE;MACzC0B,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAb,QAAA,EACf;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEhB,CAAC;AAACrB,EAAA,CA/CID,QAAQ;EAAA,QAEIH,WAAW,EAEVN,WAAW;AAAA;AAAAuC,EAAA,GAJxB9B,QAAQ;AAiDd,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}